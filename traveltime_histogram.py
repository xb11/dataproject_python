#! /usr/bin/env python
#coding=utf-8
#this program is trying to import actual departure time database and calculate 
#actual travel time in one route of user-specified date,time interval,stop(constant route) and 
#paint the histogram of one sample 

import mysql.connector
import numpy
import math
import matplotlib.pyplot as plt
from mysql.connector import errorcode

#Try to test if the connection is done
user_id = "root"
password = "1234"
database = "dataproject"
port = "3308"
try:
  cnx = mysql.connector.connect(user=user_id,password=password,database=database,port=port)
except mysql.connector.Error as err:
  if err.errno == errorcode.ER_ACCESS_DENOR:
    print("Something is wrong with your user name or password")
  elif err.errno == errorcode.ER_BAD_DB_ERROR:
    print("Database does not exists")
  else:
    print(err)
else:
  cnx.close()
  
#Create Database
cnx = mysql.connector.connect(user=user_id,password=password,database=database,port=port)
cursor = cnx.cursor()
#if there is no database set-up
def create_database(cursor):
    try:
        cursor.execute(
            "CREATE DATABASE {} DEFAULT CHARACTER SET 'utf8'".format(dataproject))
    except mysql.connector.Error as err:
        print("Failed creating database: {}".format(err))
        exit(1)

#print cnx.database  == 'dataproject'
#test if we can access the database--dataproject
try:
    cnx.database == 'dataproject'
except mysql.connector.Error as err:
    if err.errno == errorcode.ER_BAD_DB_ERROR:
        create_database(cursor)
        cnx.database = dataproject
    else:
        print(err)
        exit(1)
#user-specified data        
startyear = 2012
startmonth =9
endyear = 2013
endmonth = 10
starttime = 6
endtime = 12
stopA = 9
QstopA = "  E19790"#"  S48270"
stopB = 15
QstopB = "  E19310"#"  E41250"
route = 614

#TRAVELTIME CALCULATE AND PAINTING IN HISTOGRAM
#define data-import and pre-processing function 
def calculate_traveltime(startyear,startmonth,endyear,endmonth,starttime,endtime,stopA,QstopA,stopB,QstopB,route):
    sql = "select `daymoyr`,`TRIPA`,`HR`,`MIN`,`SEC`,`DHR`,`DMIN`,`DSEC`,`STOPA`, `QSTOPA`\
    from `dataproject`.`transit` where ROUTE = %d AND (STOPA = %d and QSTOPA = '%s') \
    or(STOPA = %d and QSTOPA = '%s') AND %d<=HR AND HR<%d AND DOW = 1 AND \
    '%d-%d-01'<=daymoyr AND daymoyr<='%d-%d-31' order by daymoyr,TRIPA ASC;"\
    %(route,stopA,QstopA,stopB,QstopB,starttime,endtime,startyear,startmonth,endyear,endmonth)
    cursor.execute(sql)
    row = cursor.fetchone()
    date = row[0]
    trip = row[1]
    Dtime = 0
    if row[8] == stopA:
        Dtime = row[5]*60 + row[6] + row[7]/60.0    
    if row[8] == stopB:
        Dtime = row[2]*60 + row[3] + row[4]/60.0
    travel_time = []
    results = cursor.fetchall()
    for row in results:
        if row[8] == stopA:
            Dtime2 = row[5]*60 + row[6] + row[7]/60.0    
        if row[8] == stopB:
            Dtime2 = row[2]*60 + row[3] + row[4]/60.0
        if row[0] == date:
            if row[1] == trip:
                travel_time.append(Dtime2 - Dtime)
            else:
                trip = row[1]
        else:
            date = row[0]
            trip = row[1]
        Dtime = Dtime2
                
    return travel_time
    
#A = calculate_traveltime(startyear,startmonth,endyear,endmonth,starttime,endtime,stopA,QstopA,stopB,QstopB,route)
#print A
A = [4.96666666666664, 3.966666666666697, 3.283333333333303, 4.0833333333332575, 4.033333333333303, 2.6333333333333258, 2.8166666666667197, 2.3166666666667197, 2.4333333333332803, 2.533333333333303, 3.533333333333303, 3.6000000000000227, 2.566666666666663, 3.5833333333332575, 3.5833333333333712, 4.75, 3.6166666666666742, 4.366666666666674, 3.6666666666666288, 2.566666666666663, 3.1333333333333258, 3.6666666666666288, 3.71666666666664, 3.4833333333333485, 3.6166666666666742, 2.7333333333333485, 4.5, 3.800000000000068, 3.6000000000000227, 4.449999999999989, 4.083333333333314, 3.5166666666667084, 4.883333333333326, 3.9833333333333485, 3.466666666666697, 3.5166666666666515, 2.5666666666667197, 2.46666666666664, 4.28333333333336, 3.6000000000000227, 4.016666666666708, 3.650000000000091, 2.6000000000000227, 3.1666666666666288, 3.0166666666666515, 2.4833333333332916, 3.28333333333336, 4.78333333333336, 3.816666666666663, 4.366666666666674, 4.966666666666583, 5.149999999999977, 3.8333333333333712, 3.25, 2.4499999999999886, 3.75, 3.6666666666666856, 3.683333333333337, 4.7666666666666515, 4.7000000000000455, 2.5, 2.699999999999932, 2.7666666666666515, 2.25, 3.316666666666663, 3.25, 3.8666666666666742, 4.599999999999966, 3.6666666666666288, 3.466666666666697, 3.3833333333333258, 3.0500000000000114, 3.2666666666666515, 3.466666666666697, 4.383333333333326, 4.03333333333336, 4.81666666666672, 3.966666666666697, 3.3333333333333712, 2.4666666666665833, 2.2999999999999545, 2.6333333333333258, 2.566666666666606, 2.5333333333334167, 2.3000000000000114, 3.683333333333337, 3.6666666666666856, 4.350000000000023, 4.100000000000023, 13.383333333333326, 4.46666666666664, 3.8333333333333712, 4.399999999999977, 3.816666666666606, 2.7333333333333485, 4.899999999999977, 3.5499999999999545, 3.5833333333332575, 2.5166666666666515, 3.6333333333333258, 4.566666666666663, 5.28333333333336, 4.46666666666664, 5.0, 4.0, 2.2999999999999545, 3.1999999999999886, 4.466666666666697, 3.6666666666666856, 3.6999999999999886, 3.5, 3.5833333333332575, 3.483333333333235, 3.1833333333332803, 2.5666666666667197, 2.1666666666666856, 4.449999999999989, 4.4833333333333485, 4.5499999999999545, 4.783333333333303, 3.966666666666697, 4.900000000000091, 3.5833333333333712, 2.966666666666697, 3.03333333333336, 3.7333333333333485, 4.800000000000011, 3.8333333333333712, 3.216666666666697, 2.816666666666606, 3.7333333333333485, 9.100000000000023, 2.28333333333336, 4.133333333333383, 3.8333333333333712, 5.2666666666666515, 5.116666666666674, 4.633333333333326, 3.216666666666697, 6.033333333333303, 2.3333333333333712, 2.4166666666667425, 2.3000000000000114, 3.1999999999999886, 5.116666666666674, 4.7666666666666515, 4.7666666666666515, 5.116666666666674, 4.5833333333332575, 5.033333333333303, 2.9666666666665833, 4.7000000000000455, 5.9500000000000455, 2.1666666666666288, 3.28333333333336, 3.8999999999999773, 3.7666666666667084, 4.666666666666686, 7.583333333333371, 5.100000000000023, 4.2000000000000455, 4.583333333333371, 2.3333333333332575, 3.5166666666667084, 4.96666666666664, 2.1000000000000227, 2.8833333333333258, 4.883333333333326, 3.6000000000000227, 3.6499999999999773, 2.9500000000000455, 2.3333333333332575, 3.3833333333333258, 3.216666666666697, 2.7666666666666515, 2.3500000000000227, 3.433333333333337, 3.5166666666666515, 3.5166666666666515, 2.433333333333337, 2.9499999999999886, 2.25, 3.3666666666666742, 2.4166666666666288, 3.7000000000000455, 2.5, 2.683333333333337, 3.400000000000091, 2.5666666666667197, 2.949999999999932, 2.466666666666697, 2.849999999999966, 3.433333333333337, 3.4166666666666856, 3.466666666666697, 4.433333333333337, 5.350000000000023, 4.833333333333314, 5.033333333333303, 3.5666666666667197, 3.1166666666666742, 4.4833333333333485, 3.6666666666667425, 2.1833333333332803, 2.683333333333337, 3.8333333333333144, 4.899999999999977, 3.8500000000000227, 2.7666666666667084, 3.6166666666666742, 4.2000000000000455, 2.8333333333333712, 2.7333333333333485, 3.566666666666606, 2.5166666666666515, 3.6666666666666288, 2.9499999999999886, 3.2333333333333485, 4.2666666666666515, 3.716666666666697, 4.75, 3.8333333333332575, 3.2333333333333485, 4.349999999999909, 2.3666666666666742, 2.3500000000000227, 3.3500000000000227, 3.3333333333333712, 3.566666666666663, 6.099999999999966, 3.96666666666664, 4.116666666666674, 6.9166666666667425, 6.4833333333333485, 6.5, 9.133333333333326, 7.316666666666606, 5.4500000000000455, 3.53333333333336, 3.650000000000034, 4.349999999999966, 3.5, 2.6000000000000227, 4.56666666666672, 2.8333333333332575, 3.349999999999966, 4.733333333333292, 4.916666666666629, 4.0166666666666515, 3.1666666666667425, 2.4833333333333485, 2.1666666666667425, 3.4499999999999886, 4.599999999999966, 2.8833333333333826, 2.9166666666667425, 3.2333333333333485, 9.300000000000068, 2.3166666666667197, 3.183333333333337, 7.050000000000011, 5.150000000000034, 4.933333333333337, 7.75, 6.46666666666664, 5.666666666666629, 6.0, 6.68333333333328, 6.583333333333371, 6.149999999999977, 3.1166666666666742, 2.4333333333332803, 4.916666666666686, 4.383333333333326, 3.1666666666666288, 4.31666666666672, 3.6833333333332803, 4.900000000000091, 5.25, 2.1666666666666288, 2.3999999999999773, 3.0500000000000114, 2.5500000000000114, 3.216666666666697, 2.9833333333333485, 2.8333333333333144, 3.4499999999999886, 2.533333333333303, 2.3500000000000227, 2.5833333333333712, 3.7000000000000455, 2.5166666666666515, 2.316666666666606, 2.46666666666664, 3.5, 2.6666666666666856, 3.1999999999999886, 2.6499999999999773, 2.6000000000000227, 2.5166666666666515, 7.433333333333337, 3.3500000000000227, 2.300000000000068, 4.916666666666629, 2.8166666666667197, 2.3666666666666742, 2.8999999999999773, 3.216666666666697, 2.1166666666666742, 2.849999999999909, 2.4500000000000455, 3.566666666666663, 3.1166666666666742, 5.050000000000011, 2.5500000000000114, 3.7000000000000455, 3.5833333333333712, 3.6666666666666288, 4.033333333333303, 2.3999999999999773, 2.8500000000000227, 2.6333333333333258, 4.4833333333333485, 2.4499999999999886, 3.5166666666666515, 3.25, 2.3500000000000227, 2.483333333333235, 3.316666666666663, 3.1666666666666856, 3.78333333333336, 4.766666666666708, 3.3666666666666742, 3.4333333333332803, 2.6499999999999773, 2.533333333333303, 4.433333333333394, 3.4166666666667425, 3.5833333333333712, 2.466666666666697, 2.6166666666666742, 3.3833333333333258, 4.666666666666629, 3.2166666666665833, 2.650000000000091, 3.2333333333333485, 3.466666666666697, 3.0, 3.716666666666697, 3.3333333333333144, 3.1333333333333258, 3.566666666666663, 2.8333333333333712, 2.433333333333337, 3.6000000000000227, 3.3833333333333258, 3.783333333333303, 3.966666666666697, 4.25, 2.6166666666665606, 2.400000000000091, 2.433333333333337, 3.1666666666666856, 4.566666666666663, 3.75, 4.916666666666686, 4.699999999999989, 4.683333333333337, 4.25, 4.616666666666674, 3.433333333333394, 3.6000000000000227, 3.6166666666666742, 3.3333333333332575, 3.6333333333333258, 3.566666666666663, 4.150000000000034, 3.8833333333333258, 3.566666666666663, 4.483333333333292, 3.783333333333303, 4.7666666666666515, 3.3166666666667197, 3.6666666666666288, 2.849999999999909, 3.283333333333303, 3.0500000000000114, 3.183333333333337, 3.6666666666666856, 4.06666666666672, 3.96666666666664, 3.3333333333333144, 3.5, 5.25, 3.3333333333333712, 3.4500000000000455, 2.8500000000000227, 2.1000000000000227, 2.6666666666666856, 3.1499999999999773, 2.78333333333336, 4.816666666666663, 3.6000000000000227, 3.0833333333332575, 3.4833333333333485, 2.783333333333303, 2.433333333333394, 2.7333333333333485, 2.1666666666666288, 2.75, 3.016666666666765, 3.1166666666666742, 3.566666666666663, 4.949999999999989, 4.5, 3.8999999999999773, 3.433333333333394, 3.033333333333303, 2.7333333333333485, 3.966666666666697, 2.6499999999999773, 1.8833333333333258, 2.2333333333333485, 2.9833333333333485, 3.4166666666666856, 3.25, 3.03333333333336, 3.6499999999999773, 5.0499999999999545, 3.9500000000000455, 3.2333333333333485, 3.5166666666666515, 2.6499999999999773, 3.53333333333336, 3.5, 4.5166666666666515, 3.9833333333333485, 2.7333333333333485, 3.2333333333333485, 3.300000000000068, 3.3999999999999773, 3.4333333333332803, 4.050000000000011, 5.116666666666674, 3.5, 3.4500000000000455, 5.083333333333371, 3.0833333333332575, 3.9166666666666288, 3.7000000000000455, 2.599999999999966, 3.3833333333333258, 3.8666666666666742, 3.183333333333337, 4.649999999999977, 4.7666666666666515, 3.283333333333303, 2.683333333333394, 4.9833333333333485, 3.3833333333333258, 2.3833333333333258, 2.3999999999999773, 3.316666666666663, 4.333333333333314, 4.75, 5.25, 6.349999999999966, 4.43333333333328, 2.4166666666666288, 2.283333333333303, 2.8333333333333712, 3.849999999999909, 3.3166666666667197, 3.216666666666697, 3.46666666666664, 4.600000000000023, 6.099999999999966, 3.8333333333333712, 3.4166666666667425, 3.1000000000000227, 2.716666666666697, 2.7666666666666515, 3.5500000000000114, 2.283333333333303, 4.683333333333394, 3.6666666666667425, 2.1666666666666288, 3.6833333333332803, 2.5333333333334167, 2.3666666666666742, 3.3833333333333258, 3.75, 3.46666666666664, 3.6166666666666742, 3.816666666666663, 4.650000000000091, 4.533333333333303, 3.4166666666667425, 3.6333333333333258, 4.5499999999999545, 3.4666666666665833, 3.7333333333333485, 2.1666666666667425, 3.4333333333332803, 4.050000000000011, 3.6999999999999886, 2.599999999999966, 3.599999999999966, 3.8333333333333712, 2.216666666666697, 4.25, 3.1000000000000227, 3.683333333333394, 3.4333333333332803, 3.199999999999932, 2.9833333333333485, 3.050000000000068, 2.400000000000034, 3.316666666666663, 4.75, 2.683333333333337, 3.6666666666666288, 3.2333333333333485, 2.599999999999909, 3.3333333333333712, 3.400000000000091, 2.6166666666666742, 2.816666666666606, 3.4166666666666288, 3.3833333333333258, 3.316666666666663, 4.449999999999989, 5.199999999999989, 5.2999999999999545, 4.7000000000000455, 5.100000000000023, 7.083333333333371, 5.31666666666672, 2.699999999999932, 2.3166666666667197, 2.533333333333303, 2.5166666666667084, 3.816666666666663, 3.5500000000000114, 3.7333333333332916, 3.5666666666667197, 2.9166666666666288, 3.0833333333333712, 2.400000000000091, 3.466666666666697, 3.6166666666666742, 5.400000000000034, 4.666666666666629, 4.850000000000023, 4.383333333333326, 2.6499999999999773, 2.5166666666666515, 2.5833333333333712, 3.03333333333336, 3.716666666666697, 3.4500000000000455, 5.916666666666629, 2.466666666666697, 3.1499999999999773, 2.4500000000000455, 3.5666666666667197, 6.216666666666697, 4.033333333333303, 4.800000000000068, 2.466666666666697, 2.4833333333333485, 2.4833333333333485, 3.900000000000034, 5.350000000000023, 3.683333333333337, 2.533333333333303, 2.566666666666606, 2.699999999999932, 2.216666666666697, 4.183333333333167, 1.449999999999818, 3.433333333333337, 3.5833333333333144, 3.4166666666666288, 4.933333333333337, 28.166666666666686, 4.099999999999966, 4.93333333333328, 4.116666666666674, 3.7333333333333485, 2.783333333333303, 3.4166666666666288, 2.4166666666666288, 2.466666666666697, 2.966666666666697, 3.566666666666663, 5.066666666666663, 5.583333333333314, 5.433333333333337, 5.0, 6.533333333333303, 4.7000000000000455, 4.0, 2.9833333333333485, 2.466666666666697]
upper_bound = int(math.ceil(numpy.max(A)))
lower_bound = 
#waitingtime = [0 for i in range(0,upper_bound)]
#for i in A:
#    waitingtime[int(math.floor(i)):int(math.floor(i)) + 1] = [waitingtime[int(math.floor(i))] + 1]

#print waitingtime

x = range(0,upper_bound + 1)
threshold = 15
# the histogram of the data
n, bins, patches = plt.hist(A,bins = x, normed=0, facecolor='green', alpha=0.5)
percentage = numpy.sum(n[0:threshold])*1.0/numpy.sum(n)
#if the user-specified threshold is between the lower_bound and the upper_bound ,it will be showed in the histogram
if threshold < upper_bound:
    l = plt.axvline(x=threshold)

plt.text(threshold,0,'%f'%percentage,horizontalalignment='center')
plt.xlabel('bus travel time')
plt.ylabel('count')
plt.show()

cnx.close()